cmake_minimum_required(VERSION 3.8)

if(DEFINED PROJECT_NAME)
  set(subproject ON)
else()
  set(subproject OFF)
endif()

project(traits VERSION 1.0.0 LANGUAGES CXX)
include(CTest)
include(CMakePackageConfigHelpers)
include(CMakeDependentOption)

CMAKE_DEPENDENT_OPTION(traits.tests
  "Build the traits tests and integrate with ctest"
  "${BUILD_TESTING}" "NOT ${subproject}" OFF)

add_library(traits INTERFACE)
add_library(shacl::traits ALIAS traits)

target_compile_features(traits INTERFACE cxx_std_14)

target_include_directories(traits INTERFACE
  $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/src>
  $<INSTALL_INTERFACE:include>)

add_subdirectory(include/traits)

if(traits.tests)
  list(APPEND CMAKE_MODULE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/.cmake")
  include(Git/Submodule/Packages)
  include(Warnings)
  find_package(Catch2)

  add_library(testing INTERFACE)
  add_library(shacl::traits::testing ALIAS testing)

  set_target_properties(testing PROPERTIES
    INTERFACE_WARNINGS_ALL ON
    INTERFACE_WARNINGS_ERROR ON
    INTERFACE_CXX_EXTENSIONS OFF)

  set_property(TEST testing APPEND PROPERTY COMPATIBLE_INTERFACE_BOOL
    WARNINGS_ALL WARNINGS_ERROR CXX_EXTENSIONS)

  target_link_libraries(testing INTERFACE warnings::warnings_CXX)
  target_link_libraries(testing INTERFACE Catch2::Catch2)
  target_link_libraries(testing INTERFACE shacl::traits)
  add_subdirectory(tests)
endif()

write_basic_package_version_file("shacl-traitsConfigVersion.cmake"
  VERSION ${traits_VERSION}
  COMPATIBILITY SameMajorVersion)

install(DIRECTORY src/
  DESTINATION include
  SOURCE_PERMISSIONS
  FILES_MATCHING PATTERN "*.h"
  FILES_MATCHING PATTERN "*test*" EXCLUDE)

install(TARGETS traits EXPORT traitsConfig)

install(EXPORT traitsConfig
  FILE shacl-traitsConfig.cmake
  NAMESPACE shacl
  DESTINATION share/cmake/shacl-traits
  PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/shacl-traitsConfigVersion.cmake"
  DESTINATION share/cmake/shacl-traits
  PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)

#
# Rudimentary CPack support.
#
# CPack provides a mechanism to generate installation packaging for a project,
# e.g., self-extracting shell scripts, compressed tarballs, Debian Package files,
# RPM Package Manager files, Windows NSIS installation wizards,
# Apple Disk Images (.dmg), etc.
#
# Any system libraries required (runtimes, threading, etc) should be bundled
# with the project for this type of installation. The
# `InstallRequiredSystemLibraries` CMake module attempts to provide this
# functionality in an automated way. Additional libraries may be specified as
#
# ```cmake
# list(APPEND CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS <library>)
# ```
#
# A packaged installation can be generated by calling
#
# ```sh
# cpack -G <packaging type> --config CPackConfig.cmake
# ```
#
# See `cpack --help` or the CPack documentation for more information.
#
include( InstallRequiredSystemLibraries )
set( CPACK_PACKAGE_VENDOR "Los Alamos National Laboratory" )
set( CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE" )
set( CMAKE_PROJECT_HOMEPAGE_URL "https://xcp-stash.lanl.gov/projects/SCL/repos/traits" )
include( CPack )
